// <auto-generated />
using System;
using ExploreThrill.Entities.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExploreThrill.Entities.Migrations
{
    [DbContext(typeof(ExploreContext))]
    partial class ExploreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ActivityCity", b =>
                {
                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.HasKey("ActivityId", "CityId");

                    b.HasIndex("CityId");

                    b.ToTable("ActivityCity");

                    b.HasData(
                        new
                        {
                            ActivityId = 1,
                            CityId = 1
                        },
                        new
                        {
                            ActivityId = 1,
                            CityId = 4
                        },
                        new
                        {
                            ActivityId = 2,
                            CityId = 3
                        },
                        new
                        {
                            ActivityId = 3,
                            CityId = 9
                        },
                        new
                        {
                            ActivityId = 4,
                            CityId = 4
                        },
                        new
                        {
                            ActivityId = 5,
                            CityId = 4
                        },
                        new
                        {
                            ActivityId = 5,
                            CityId = 2
                        },
                        new
                        {
                            ActivityId = 6,
                            CityId = 9
                        },
                        new
                        {
                            ActivityId = 6,
                            CityId = 6
                        },
                        new
                        {
                            ActivityId = 7,
                            CityId = 1
                        },
                        new
                        {
                            ActivityId = 7,
                            CityId = 10
                        });
                });

            modelBuilder.Entity("ExploreThrill.Core.Entities.Concrete.MyUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TcNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "99c113c8-3358-4c3f-b376-d16ae2947611",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bdb65b1b-57a1-47f9-abab-5a297a96ca5e",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "admin@admin.com",
                            NormalizedUserName = "admin@admin.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEDgwen5wue/zZZ3CWMUDyV+gLfZ8PbfnnCZcYi5U2zhgUqrTBQszatSCaYgn8JxDNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TcNo = "12345678955",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("ExploreThrill.Entities.Models.Concrete.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("MyUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("MyUserId");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityDate = new DateTime(2024, 8, 17, 20, 5, 52, 44, DateTimeKind.Utc).AddTicks(4717),
                            ActivityName = "Paragliding",
                            Capacity = 10,
                            CategoryId = 3,
                            CompanyId = 1,
                            CreateDate = new DateTime(2024, 8, 17, 23, 5, 52, 44, DateTimeKind.Local).AddTicks(4702),
                            Description = "Fly over mountains",
                            Price = 150.00m
                        },
                        new
                        {
                            Id = 2,
                            ActivityDate = new DateTime(2024, 8, 17, 20, 5, 52, 44, DateTimeKind.Utc).AddTicks(4721),
                            ActivityName = "Canoeing",
                            Capacity = 8,
                            CategoryId = 1,
                            CompanyId = 4,
                            CreateDate = new DateTime(2024, 8, 17, 23, 5, 52, 44, DateTimeKind.Local).AddTicks(4719),
                            Description = "Explore rivers",
                            Price = 100.00m
                        },
                        new
                        {
                            Id = 3,
                            ActivityDate = new DateTime(2024, 8, 17, 20, 5, 52, 44, DateTimeKind.Utc).AddTicks(4723),
                            ActivityName = "Hot Air Ballooning",
                            Capacity = 5,
                            CategoryId = 2,
                            CompanyId = 2,
                            CreateDate = new DateTime(2024, 8, 17, 23, 5, 52, 44, DateTimeKind.Local).AddTicks(4722),
                            Description = "See the world from above",
                            Price = 200.00m
                        },
                        new
                        {
                            Id = 4,
                            ActivityDate = new DateTime(2024, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ActivityName = "Scuba Diving",
                            Capacity = 10,
                            CategoryId = 1,
                            CompanyId = 4,
                            CreateDate = new DateTime(2024, 8, 17, 23, 5, 52, 44, DateTimeKind.Local).AddTicks(4724),
                            Description = "Explore the underwater world",
                            Price = 250.00m
                        },
                        new
                        {
                            Id = 5,
                            ActivityDate = new DateTime(2024, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ActivityName = "Boat Tour",
                            Capacity = 5,
                            CategoryId = 5,
                            CompanyId = 3,
                            CreateDate = new DateTime(2024, 8, 17, 23, 5, 52, 44, DateTimeKind.Local).AddTicks(4727),
                            Description = "Explore the sea",
                            Price = 250.00m
                        },
                        new
                        {
                            Id = 6,
                            ActivityDate = new DateTime(2024, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ActivityName = "Mountain Climbing",
                            Capacity = 5,
                            CategoryId = 2,
                            CompanyId = 2,
                            CreateDate = new DateTime(2024, 8, 17, 23, 5, 52, 44, DateTimeKind.Local).AddTicks(4729),
                            Description = "Conquer the peaks",
                            Price = 300.00m
                        },
                        new
                        {
                            Id = 7,
                            ActivityDate = new DateTime(2024, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ActivityName = "Historical Tour",
                            Capacity = 20,
                            CategoryId = 4,
                            CompanyId = 4,
                            CreateDate = new DateTime(2024, 8, 17, 23, 5, 52, 44, DateTimeKind.Local).AddTicks(4731),
                            Description = "Discover the ancient ruins",
                            Price = 150.00m
                        });
                });

            modelBuilder.Entity("ExploreThrill.Entities.Models.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MyUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName")
                        .IsUnique();

                    b.HasIndex("MyUserId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Water Activity",
                            CreateDate = new DateTime(2024, 8, 17, 20, 5, 52, 44, DateTimeKind.Utc).AddTicks(7140)
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Nature Activity",
                            CreateDate = new DateTime(2024, 8, 17, 20, 5, 52, 44, DateTimeKind.Utc).AddTicks(7142)
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Adventure Activity",
                            CreateDate = new DateTime(2024, 8, 17, 20, 5, 52, 44, DateTimeKind.Utc).AddTicks(7143)
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Culture Activity",
                            CreateDate = new DateTime(2024, 8, 17, 20, 5, 52, 44, DateTimeKind.Utc).AddTicks(7145)
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Daily Activity",
                            CreateDate = new DateTime(2024, 8, 17, 20, 5, 52, 44, DateTimeKind.Utc).AddTicks(7146)
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "Workshop",
                            CreateDate = new DateTime(2024, 8, 17, 20, 5, 52, 44, DateTimeKind.Utc).AddTicks(7147)
                        });
                });

            modelBuilder.Entity("ExploreThrill.Entities.Models.Concrete.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MyUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("MyUserId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2024, 8, 17, 20, 5, 52, 44, DateTimeKind.Utc).AddTicks(9188),
                            Name = "İstanbul"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2024, 8, 17, 20, 5, 52, 44, DateTimeKind.Utc).AddTicks(9190),
                            Name = "Ankara"
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2024, 8, 17, 20, 5, 52, 44, DateTimeKind.Utc).AddTicks(9191),
                            Name = "İzmir"
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2024, 8, 17, 20, 5, 52, 44, DateTimeKind.Utc).AddTicks(9193),
                            Name = "Antalya"
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2024, 8, 17, 20, 5, 52, 44, DateTimeKind.Utc).AddTicks(9194),
                            Name = "Bursa"
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2024, 8, 17, 20, 5, 52, 44, DateTimeKind.Utc).AddTicks(9195),
                            Name = "Kastamonu"
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2024, 8, 17, 20, 5, 52, 44, DateTimeKind.Utc).AddTicks(9196),
                            Name = "Rize"
                        },
                        new
                        {
                            Id = 8,
                            CreateDate = new DateTime(2024, 8, 17, 20, 5, 52, 44, DateTimeKind.Utc).AddTicks(9197),
                            Name = "Gaziantep"
                        },
                        new
                        {
                            Id = 9,
                            CreateDate = new DateTime(2024, 8, 17, 20, 5, 52, 44, DateTimeKind.Utc).AddTicks(9198),
                            Name = "Şanlıurfa"
                        },
                        new
                        {
                            Id = 10,
                            CreateDate = new DateTime(2024, 8, 17, 20, 5, 52, 44, DateTimeKind.Utc).AddTicks(9199),
                            Name = "Mardin"
                        });
                });

            modelBuilder.Entity("ExploreThrill.Entities.Models.Concrete.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MyUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("MyUserId");

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.HasIndex("Website")
                        .IsUnique();

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Istanbul, Turkey",
                            CompanyName = "Turkish Travel",
                            CreateDate = new DateTime(2024, 8, 17, 20, 5, 52, 45, DateTimeKind.Utc).AddTicks(3114),
                            Description = "Leading travel company in Turkey",
                            Email = "info@turkishtravel.com",
                            Phone = "00321234567",
                            Website = "www.turkishtravel.com"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Ankara, Turkey",
                            CompanyName = "Anatolia Adventures",
                            CreateDate = new DateTime(2024, 8, 17, 20, 5, 52, 45, DateTimeKind.Utc).AddTicks(3117),
                            Description = "Discover the beauty of Anatolia",
                            Email = "contact@anatoliaadventures.com",
                            Phone = "00337654321",
                            Website = "www.anatoliaadventures.com"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Izmir, Turkey",
                            CompanyName = "Ege Tours",
                            CreateDate = new DateTime(2024, 8, 17, 20, 5, 52, 45, DateTimeKind.Utc).AddTicks(3118),
                            Description = "Explore the Aegean coast",
                            Email = "support@egetours.com",
                            Phone = "00339876543",
                            Website = "www.egetours.com"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Antalya, Turkey",
                            CompanyName = "Antalya Getaways",
                            CreateDate = new DateTime(2024, 8, 17, 20, 5, 52, 45, DateTimeKind.Utc).AddTicks(3120),
                            Description = "Your guide to Antalya",
                            Email = "info@antalyagetaways.com",
                            Phone = "00335432123",
                            Website = "www.antalyagetaways.com"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Mardin, Turkey",
                            CompanyName = "Mardin Travels",
                            CreateDate = new DateTime(2024, 8, 17, 20, 5, 52, 45, DateTimeKind.Utc).AddTicks(3122),
                            Description = "Experience the historical city of Mardin",
                            Email = "info@mardintravels.com",
                            Phone = "00332109876",
                            Website = "www.mardintravels.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "99c113c8-3358-4c3f-b376-d16ae29476b8",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "99c113c8-3358-4c3f-b376-d16ae2947611",
                            RoleId = "99c113c8-3358-4c3f-b376-d16ae29476b8"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ActivityCity", b =>
                {
                    b.HasOne("ExploreThrill.Entities.Models.Concrete.Activity", null)
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExploreThrill.Entities.Models.Concrete.City", null)
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExploreThrill.Entities.Models.Concrete.Activity", b =>
                {
                    b.HasOne("ExploreThrill.Entities.Models.Concrete.Category", "Category")
                        .WithMany("Activities")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExploreThrill.Entities.Models.Concrete.Company", "Company")
                        .WithMany("Activities")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExploreThrill.Core.Entities.Concrete.MyUser", "MyUser")
                        .WithMany()
                        .HasForeignKey("MyUserId");

                    b.Navigation("Category");

                    b.Navigation("Company");

                    b.Navigation("MyUser");
                });

            modelBuilder.Entity("ExploreThrill.Entities.Models.Concrete.Category", b =>
                {
                    b.HasOne("ExploreThrill.Core.Entities.Concrete.MyUser", "MyUser")
                        .WithMany()
                        .HasForeignKey("MyUserId");

                    b.Navigation("MyUser");
                });

            modelBuilder.Entity("ExploreThrill.Entities.Models.Concrete.City", b =>
                {
                    b.HasOne("ExploreThrill.Core.Entities.Concrete.MyUser", "MyUser")
                        .WithMany()
                        .HasForeignKey("MyUserId");

                    b.Navigation("MyUser");
                });

            modelBuilder.Entity("ExploreThrill.Entities.Models.Concrete.Company", b =>
                {
                    b.HasOne("ExploreThrill.Core.Entities.Concrete.MyUser", "MyUser")
                        .WithMany()
                        .HasForeignKey("MyUserId");

                    b.Navigation("MyUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ExploreThrill.Core.Entities.Concrete.MyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ExploreThrill.Core.Entities.Concrete.MyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExploreThrill.Core.Entities.Concrete.MyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ExploreThrill.Core.Entities.Concrete.MyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExploreThrill.Entities.Models.Concrete.Category", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("ExploreThrill.Entities.Models.Concrete.Company", b =>
                {
                    b.Navigation("Activities");
                });
#pragma warning restore 612, 618
        }
    }
}
