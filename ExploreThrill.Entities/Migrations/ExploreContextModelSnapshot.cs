// <auto-generated />
using System;
using ExploreThrill.Entities.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExploreThrill.Entities.Migrations
{
    [DbContext(typeof(ExploreContext))]
    partial class ExploreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ActivityCategory", b =>
                {
                    b.Property<int>("ActivitiesId")
                        .HasColumnType("int");

                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.HasKey("ActivitiesId", "CategoriesId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("ActivityCategory");
                });

            modelBuilder.Entity("ActivityCity", b =>
                {
                    b.Property<int>("ActivitiesId")
                        .HasColumnType("int");

                    b.Property<int>("CitiesId")
                        .HasColumnType("int");

                    b.HasKey("ActivitiesId", "CitiesId");

                    b.HasIndex("CitiesId");

                    b.ToTable("ActivityCity");
                });

            modelBuilder.Entity("ActivityCompany", b =>
                {
                    b.Property<int>("ActivitiesId")
                        .HasColumnType("int");

                    b.Property<int>("CompaniesId")
                        .HasColumnType("int");

                    b.HasKey("ActivitiesId", "CompaniesId");

                    b.HasIndex("CompaniesId");

                    b.ToTable("ActivityCompany");
                });

            modelBuilder.Entity("ExploreThrill.Core.Entities.Concrete.MyUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TcNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ExploreThrill.Entities.Models.Concrete.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("MyUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MyUserId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("ExploreThrill.Entities.Models.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MyUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName")
                        .IsUnique();

                    b.HasIndex("MyUserId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Su Sporları",
                            CreateDate = new DateTime(2024, 8, 10, 13, 17, 4, 138, DateTimeKind.Utc).AddTicks(7214)
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Doğa Etkinlikleri",
                            CreateDate = new DateTime(2024, 8, 10, 13, 17, 4, 138, DateTimeKind.Utc).AddTicks(7216)
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Adrenalin Etkinlikleri",
                            CreateDate = new DateTime(2024, 8, 10, 13, 17, 4, 138, DateTimeKind.Utc).AddTicks(7218)
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Kültürel Etkinlikler",
                            CreateDate = new DateTime(2024, 8, 10, 13, 17, 4, 138, DateTimeKind.Utc).AddTicks(7220)
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Günübirlik Etkinlikler",
                            CreateDate = new DateTime(2024, 8, 10, 13, 17, 4, 138, DateTimeKind.Utc).AddTicks(7222)
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "Atölyeler",
                            CreateDate = new DateTime(2024, 8, 10, 13, 17, 4, 138, DateTimeKind.Utc).AddTicks(7224)
                        });
                });

            modelBuilder.Entity("ExploreThrill.Entities.Models.Concrete.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MyUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("MyUserId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2024, 8, 10, 13, 17, 4, 139, DateTimeKind.Utc).AddTicks(618),
                            Name = "İstanbul"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2024, 8, 10, 13, 17, 4, 139, DateTimeKind.Utc).AddTicks(620),
                            Name = "Ankara"
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2024, 8, 10, 13, 17, 4, 139, DateTimeKind.Utc).AddTicks(622),
                            Name = "İzmir"
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2024, 8, 10, 13, 17, 4, 139, DateTimeKind.Utc).AddTicks(624),
                            Name = "Antalya"
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2024, 8, 10, 13, 17, 4, 139, DateTimeKind.Utc).AddTicks(626),
                            Name = "Bursa"
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2024, 8, 10, 13, 17, 4, 139, DateTimeKind.Utc).AddTicks(628),
                            Name = "Kastamonu"
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2024, 8, 10, 13, 17, 4, 139, DateTimeKind.Utc).AddTicks(630),
                            Name = "Rize"
                        },
                        new
                        {
                            Id = 8,
                            CreateDate = new DateTime(2024, 8, 10, 13, 17, 4, 139, DateTimeKind.Utc).AddTicks(632),
                            Name = "Gaziantep"
                        },
                        new
                        {
                            Id = 9,
                            CreateDate = new DateTime(2024, 8, 10, 13, 17, 4, 139, DateTimeKind.Utc).AddTicks(634),
                            Name = "Şanlıurfa"
                        },
                        new
                        {
                            Id = 10,
                            CreateDate = new DateTime(2024, 8, 10, 13, 17, 4, 139, DateTimeKind.Utc).AddTicks(636),
                            Name = "Mardin"
                        });
                });

            modelBuilder.Entity("ExploreThrill.Entities.Models.Concrete.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MyUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("MyUserId");

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.HasIndex("Website")
                        .IsUnique();

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Istanbul, Turkey",
                            CompanyName = "Turkish Travel",
                            CreateDate = new DateTime(2024, 8, 10, 13, 17, 4, 139, DateTimeKind.Utc).AddTicks(5941),
                            Description = "Leading travel company in Turkey",
                            Email = "info@turkishtravel.com",
                            Phone = "00321234567",
                            Website = "www.turkishtravel.com"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Ankara, Turkey",
                            CompanyName = "Anatolia Adventures",
                            CreateDate = new DateTime(2024, 8, 10, 13, 17, 4, 139, DateTimeKind.Utc).AddTicks(5945),
                            Description = "Discover the beauty of Anatolia",
                            Email = "contact@anatoliaadventures.com",
                            Phone = "00337654321",
                            Website = "www.anatoliaadventures.com"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Izmir, Turkey",
                            CompanyName = "Ege Tours",
                            CreateDate = new DateTime(2024, 8, 10, 13, 17, 4, 139, DateTimeKind.Utc).AddTicks(5947),
                            Description = "Explore the Aegean coast",
                            Email = "support@egetours.com",
                            Phone = "00339876543",
                            Website = "www.egetours.com"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Antalya, Turkey",
                            CompanyName = "Antalya Getaways",
                            CreateDate = new DateTime(2024, 8, 10, 13, 17, 4, 139, DateTimeKind.Utc).AddTicks(5950),
                            Description = "Your guide to Antalya",
                            Email = "info@antalyagetaways.com",
                            Phone = "00335432123",
                            Website = "www.antalyagetaways.com"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Mardin, Turkey",
                            CompanyName = "Mardin Travels",
                            CreateDate = new DateTime(2024, 8, 10, 13, 17, 4, 139, DateTimeKind.Utc).AddTicks(5952),
                            Description = "Experience the historical city of Mardin",
                            Email = "info@mardintravels.com",
                            Phone = "00332109876",
                            Website = "www.mardintravels.com"
                        });
                });

            modelBuilder.Entity("ExploreThrill.Entities.Models.Concrete.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MyUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("MyUserId");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.ToTable("Images");
                });

            modelBuilder.Entity("ExploreThrill.Entities.Models.Concrete.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MyUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("MyUserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ActivityCategory", b =>
                {
                    b.HasOne("ExploreThrill.Entities.Models.Concrete.Activity", null)
                        .WithMany()
                        .HasForeignKey("ActivitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExploreThrill.Entities.Models.Concrete.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ActivityCity", b =>
                {
                    b.HasOne("ExploreThrill.Entities.Models.Concrete.Activity", null)
                        .WithMany()
                        .HasForeignKey("ActivitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExploreThrill.Entities.Models.Concrete.City", null)
                        .WithMany()
                        .HasForeignKey("CitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ActivityCompany", b =>
                {
                    b.HasOne("ExploreThrill.Entities.Models.Concrete.Activity", null)
                        .WithMany()
                        .HasForeignKey("ActivitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExploreThrill.Entities.Models.Concrete.Company", null)
                        .WithMany()
                        .HasForeignKey("CompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExploreThrill.Entities.Models.Concrete.Activity", b =>
                {
                    b.HasOne("ExploreThrill.Core.Entities.Concrete.MyUser", "MyUser")
                        .WithMany()
                        .HasForeignKey("MyUserId");

                    b.Navigation("MyUser");
                });

            modelBuilder.Entity("ExploreThrill.Entities.Models.Concrete.Category", b =>
                {
                    b.HasOne("ExploreThrill.Core.Entities.Concrete.MyUser", "MyUser")
                        .WithMany()
                        .HasForeignKey("MyUserId");

                    b.Navigation("MyUser");
                });

            modelBuilder.Entity("ExploreThrill.Entities.Models.Concrete.City", b =>
                {
                    b.HasOne("ExploreThrill.Core.Entities.Concrete.MyUser", "MyUser")
                        .WithMany()
                        .HasForeignKey("MyUserId");

                    b.Navigation("MyUser");
                });

            modelBuilder.Entity("ExploreThrill.Entities.Models.Concrete.Company", b =>
                {
                    b.HasOne("ExploreThrill.Core.Entities.Concrete.MyUser", "MyUser")
                        .WithMany()
                        .HasForeignKey("MyUserId");

                    b.Navigation("MyUser");
                });

            modelBuilder.Entity("ExploreThrill.Entities.Models.Concrete.Image", b =>
                {
                    b.HasOne("ExploreThrill.Entities.Models.Concrete.Activity", "Activity")
                        .WithMany("Images")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExploreThrill.Core.Entities.Concrete.MyUser", "MyUser")
                        .WithMany()
                        .HasForeignKey("MyUserId");

                    b.Navigation("Activity");

                    b.Navigation("MyUser");
                });

            modelBuilder.Entity("ExploreThrill.Entities.Models.Concrete.Review", b =>
                {
                    b.HasOne("ExploreThrill.Entities.Models.Concrete.Activity", "Activity")
                        .WithMany("Reviews")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExploreThrill.Core.Entities.Concrete.MyUser", "MyUser")
                        .WithMany()
                        .HasForeignKey("MyUserId");

                    b.Navigation("Activity");

                    b.Navigation("MyUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ExploreThrill.Core.Entities.Concrete.MyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ExploreThrill.Core.Entities.Concrete.MyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExploreThrill.Core.Entities.Concrete.MyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ExploreThrill.Core.Entities.Concrete.MyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExploreThrill.Entities.Models.Concrete.Activity", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
